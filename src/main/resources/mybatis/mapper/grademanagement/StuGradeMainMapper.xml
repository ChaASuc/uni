<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="edu.uni.grademanagement.mapper.StuGradeMainMapper" >
  <resultMap id="BaseResultMap" type="edu.uni.grademanagement.bean.StuGradeMain" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="university_id" property="universityId" jdbcType="BIGINT" />
    <result column="semester_id" property="semesterId" jdbcType="BIGINT" />
    <result column="student_id" property="studentId" jdbcType="BIGINT" />
    <result column="course_id" property="courseId" jdbcType="BIGINT" />
    <result column="score" property="score" jdbcType="DOUBLE" />
    <result column="point" property="point" jdbcType="DOUBLE" />
    <result column="state" property="state" jdbcType="TINYINT" />
    <result column="datetime" property="datetime" jdbcType="TIMESTAMP" />
    <result column="by_who" property="byWho" jdbcType="BIGINT" />
    <result column="deleted" property="deleted" jdbcType="TINYINT" />
    <result column="cache" property="cache" jdbcType="TINYINT" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, university_id, semester_id, student_id, course_id, score, point, state, datetime, 
    by_who, deleted, cache
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="edu.uni.grademanagement.bean.StuGradeMainExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from stu_grade_main
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from stu_grade_main
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from stu_grade_main
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="edu.uni.grademanagement.bean.StuGradeMainExample" >
    delete from stu_grade_main
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="edu.uni.grademanagement.bean.StuGradeMain" >
    <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into stu_grade_main (university_id, semester_id, student_id, 
      course_id, score, point, 
      state, datetime, by_who, 
      deleted, cache)
    values (#{universityId,jdbcType=BIGINT}, #{semesterId,jdbcType=BIGINT}, #{studentId,jdbcType=BIGINT}, 
      #{courseId,jdbcType=BIGINT}, #{score,jdbcType=DOUBLE}, #{point,jdbcType=DOUBLE}, 
      #{state,jdbcType=TINYINT}, #{datetime,jdbcType=TIMESTAMP}, #{byWho,jdbcType=BIGINT}, 
      #{deleted,jdbcType=TINYINT}, #{cache,jdbcType=TINYINT})
  </insert>
  <insert id="insertSelective" parameterType="edu.uni.grademanagement.bean.StuGradeMain" >
    <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into stu_grade_main
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="universityId != null" >
        university_id,
      </if>
      <if test="semesterId != null" >
        semester_id,
      </if>
      <if test="studentId != null" >
        student_id,
      </if>
      <if test="courseId != null" >
        course_id,
      </if>
      <if test="score != null" >
        score,
      </if>
      <if test="point != null" >
        point,
      </if>
      <if test="state != null" >
        state,
      </if>
      <if test="datetime != null" >
        datetime,
      </if>
      <if test="byWho != null" >
        by_who,
      </if>
      <if test="deleted != null" >
        deleted,
      </if>
      <if test="cache != null" >
        cache,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="universityId != null" >
        #{universityId,jdbcType=BIGINT},
      </if>
      <if test="semesterId != null" >
        #{semesterId,jdbcType=BIGINT},
      </if>
      <if test="studentId != null" >
        #{studentId,jdbcType=BIGINT},
      </if>
      <if test="courseId != null" >
        #{courseId,jdbcType=BIGINT},
      </if>
      <if test="score != null" >
        #{score,jdbcType=DOUBLE},
      </if>
      <if test="point != null" >
        #{point,jdbcType=DOUBLE},
      </if>
      <if test="state != null" >
        #{state,jdbcType=TINYINT},
      </if>
      <if test="datetime != null" >
        #{datetime,jdbcType=TIMESTAMP},
      </if>
      <if test="byWho != null" >
        #{byWho,jdbcType=BIGINT},
      </if>
      <if test="deleted != null" >
        #{deleted,jdbcType=TINYINT},
      </if>
      <if test="cache != null" >
        #{cache,jdbcType=TINYINT},
      </if>
    </trim>
  </insert>

  <insert id="insertStuGradeMainsSelective">
    <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into stu_grade_main
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="universityId != null" >
        university_id,
      </if>
      <if test="semesterId != null" >
        semester_id,
      </if>
      <if test="studentId != null" >
        student_id,
      </if>
      <if test="courseId != null" >
        course_id,
      </if>
      <if test="score != null" >
        score,
      </if>
      <if test="point != null" >
        point,
      </if>
      <if test="state != null" >
        state,
      </if>
      <if test="datetime != null" >
        datetime,
      </if>
      <if test="byWho != null" >
        by_who,
      </if>
      <if test="deleted != null" >
        deleted,
      </if>
      <if test="cache != null" >
        cache,
      </if>
    </trim>
    values
    <foreach collection="records" index="index" item="record" separator="," >
      <trim prefix="(" suffix=")" suffixOverrides="," >
        <if test="universityId != null" >
          #{universityId,jdbcType=BIGINT},
        </if>
        <if test="semesterId != null" >
          #{semesterId,jdbcType=BIGINT},
        </if>
        <if test="studentId != null" >
          #{studentId,jdbcType=BIGINT},
        </if>
        <if test="courseId != null" >
          #{courseId,jdbcType=BIGINT},
        </if>
        <if test="score != null" >
          #{score,jdbcType=DOUBLE},
        </if>
        <if test="point != null" >
          #{point,jdbcType=DOUBLE},
        </if>
        <if test="state != null" >
          #{state,jdbcType=TINYINT},
        </if>
        <if test="datetime != null" >
          #{datetime,jdbcType=TIMESTAMP},
        </if>
        <if test="byWho != null" >
          #{byWho,jdbcType=BIGINT},
        </if>
        <if test="deleted != null" >
          #{deleted,jdbcType=TINYINT},
        </if>
        <if test="cache != null" >
          #{cache,jdbcType=TINYINT},
        </if>
      </trim>
    </foreach>
  </insert>

  <insert id="insertStuGradeMains">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into stu_grade_main (university_id, semester_id, student_id,
    course_id, score, point, by_who)
    values
    <foreach collection="records" index="index" item="record" separator="," >
      (
      #{record.universityId},
      #{record.semesterId},
      #{record.studentId},
      #{record.courseId},
      #{record.score},
      #{record.point},
      #{record.byWho}
      )
    </foreach>
  </insert>

  <select id="countByExample" parameterType="edu.uni.grademanagement.bean.StuGradeMainExample" resultType="java.lang.Integer" >
    select count(*) from stu_grade_main
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update stu_grade_main
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.universityId != null" >
        university_id = #{record.universityId,jdbcType=BIGINT},
      </if>
      <if test="record.semesterId != null" >
        semester_id = #{record.semesterId,jdbcType=BIGINT},
      </if>
      <if test="record.studentId != null" >
        student_id = #{record.studentId,jdbcType=BIGINT},
      </if>
      <if test="record.courseId != null" >
        course_id = #{record.courseId,jdbcType=BIGINT},
      </if>
      <if test="record.score != null" >
        score = #{record.score,jdbcType=DOUBLE},
      </if>
      <if test="record.point != null" >
        point = #{record.point,jdbcType=DOUBLE},
      </if>
      <if test="record.state != null" >
        state = #{record.state,jdbcType=TINYINT},
      </if>
      <if test="record.datetime != null" >
        datetime = #{record.datetime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.byWho != null" >
        by_who = #{record.byWho,jdbcType=BIGINT},
      </if>
      <if test="record.deleted != null" >
        deleted = #{record.deleted,jdbcType=TINYINT},
      </if>
      <if test="record.cache != null" >
        cache = #{record.cache,jdbcType=TINYINT},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update stu_grade_main
    set id = #{record.id,jdbcType=BIGINT},
      university_id = #{record.universityId,jdbcType=BIGINT},
      semester_id = #{record.semesterId,jdbcType=BIGINT},
      student_id = #{record.studentId,jdbcType=BIGINT},
      course_id = #{record.courseId,jdbcType=BIGINT},
      score = #{record.score,jdbcType=DOUBLE},
      point = #{record.point,jdbcType=DOUBLE},
      state = #{record.state,jdbcType=TINYINT},
      datetime = #{record.datetime,jdbcType=TIMESTAMP},
      by_who = #{record.byWho,jdbcType=BIGINT},
      deleted = #{record.deleted,jdbcType=TINYINT},
      cache = #{record.cache,jdbcType=TINYINT}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="edu.uni.grademanagement.bean.StuGradeMain" >
    update stu_grade_main
    <set >
      <if test="universityId != null" >
        university_id = #{universityId,jdbcType=BIGINT},
      </if>
      <if test="semesterId != null" >
        semester_id = #{semesterId,jdbcType=BIGINT},
      </if>
      <if test="studentId != null" >
        student_id = #{studentId,jdbcType=BIGINT},
      </if>
      <if test="courseId != null" >
        course_id = #{courseId,jdbcType=BIGINT},
      </if>
      <if test="score != null" >
        score = #{score,jdbcType=DOUBLE},
      </if>
      <if test="point != null" >
        point = #{point,jdbcType=DOUBLE},
      </if>
      <if test="state != null" >
        state = #{state,jdbcType=TINYINT},
      </if>
      <if test="datetime != null" >
        datetime = #{datetime,jdbcType=TIMESTAMP},
      </if>
      <if test="byWho != null" >
        by_who = #{byWho,jdbcType=BIGINT},
      </if>
      <if test="deleted != null" >
        deleted = #{deleted,jdbcType=TINYINT},
      </if>
      <if test="cache != null" >
        cache = #{cache,jdbcType=TINYINT},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="edu.uni.grademanagement.bean.StuGradeMain" >
    update stu_grade_main
    set university_id = #{universityId,jdbcType=BIGINT},
      semester_id = #{semesterId,jdbcType=BIGINT},
      student_id = #{studentId,jdbcType=BIGINT},
      course_id = #{courseId,jdbcType=BIGINT},
      score = #{score,jdbcType=DOUBLE},
      point = #{point,jdbcType=DOUBLE},
      state = #{state,jdbcType=TINYINT},
      datetime = #{datetime,jdbcType=TIMESTAMP},
      by_who = #{byWho,jdbcType=BIGINT},
      deleted = #{deleted,jdbcType=TINYINT},
      cache = #{cache,jdbcType=TINYINT}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>